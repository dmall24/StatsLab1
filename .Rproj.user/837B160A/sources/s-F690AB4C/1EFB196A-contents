---
title: "Lab3"
author: "Derek Maldonado"
date: "9/12/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(dplyr)
library(ggplot2)
```

## Question 1
Create five samples of 25 observations from a normal distribution with mean 200 and sd 100.
compute the mean of each sample, and plot the means in a graph using ggplot2

```{r}
dataone <- rnorm(125,200,100)
graphs <- rep(1:5, each=25)

quesone <- data.frame(dataone, graphs)
meanone <- quesone %>%
  group_by(graphs)%>%
  summarize(realmeans = mean(dataone))

ggplot(meanone, aes(x=graphs, y=realmeans))+
  geom_histogram(stat="identity")
#50% couldn't spell functions correctly
```

## Question 2
additionally calculate the standard deviation of each sample from above.
use the st devs for error bars, and produce another graph w/ the means along with error bars

```{r}
datatwo <- rnorm(125,200,100)
graphagain <- rep(1:5, each=25)

questwo <- data.frame(datatwo, graphagain)
meantwo <- questwo %>%
  group_by(graphagain)%>%
  summarize(realmeanstwo = mean(datatwo),
            sdtwo = sd(datatwo))


ggplot(meantwo, aes(x=graphagain, y=realmeanstwo))+
  geom_histogram(stat="identity")+
  geom_errorbar(aes(ymin=realmeanstwo-sdtwo,
                    ymax=realmeanstwo+sdtwo),
                width= 0.25)
#50% mostly copied previous question,  needed help on how to incorporate sdtwo into summarize
```

## question 3

demonstrate that the sample mean across a range of n is an unbiased estimator of the population mean using a monte-carlo simulation.the population is a normal distribution w/ mean = 10, stdev = 5.

```{r}
sampfor<- c(2,5,10,50,100)
#sampnum <- c()
sampmean<- c()
#sampsd <-c()

for(n in 1:length(sampfor)){

qthree <- rnorm(sampfor[n]*10000,10,5)
samples<- rep(1:10000, each=sampfor[n])
datathree<- data.frame(qthree, samples)

mthree <- datathree %>% 
  group_by(samples) %>%
  summarize(meansss = mean(qthree))

sampmean[n] <- mean(mthree$meansss)
}
sampledata <- data.frame(sampfor,sampmean)

ggplot(sampledata, aes(x=sampfor, y=sampmean))+
         geom_point()+
  geom_line()+
  coord_cartesian(ylim=c(0,20))
       
       

#for (i in 10000){
#  sampfor[i]
#  sampnum[i] <- sample(x=c(1:20), size=2, replace=FALSE)
#  sampmean[i] <- sum(sampnum)/length(sampnum)
#  sampsd[i] <- sd(sampnum)
#}

#10% figured out most of for loop alone from coin flip example
```


## Question 4
Use a monte carlo simulation to compare the standard deviation formulas (divide by N vs N-1), and show that the N-1 formula is a better unbiased estimate of the population standard deviation, especially for small n

```{r}
sdfunction <- function(x){
  sqrt(sum((mean(x)-x)^2)/length(x))
}

sampfor<- c(2,5,10,50,100)
#sampnum <- c()
#sampmean<- c()
sampsd <-c()
sampsdfun <-c()

for(n in 1:length(sampfor)){

qfour <- rnorm(sampfor[n]*10000,10,5)
samples<- rep(1:10000, each=sampfor[n])
datafour<- data.frame(qfour, samples)

sdfour <- datafour %>% 
  group_by(samples) %>%
  summarize(sdsss = sd(qfour),
            sdfun = sdfunction(qfour))

sampsd[n] <- mean(sdfour$sdsss)
sampsdfun[n] <- mean(sdfour$sdfun)
}
sampledata <- data.frame(i = rep(sampfor,2),
                         est = c(sampsd, sampsdfun),
                         formula= c(rep("N-1",5),rep("N",5)))

ggplot(sampledata, aes(x=i, y=est, color=formula))+
         geom_point()+
  geom_line()+
  coord_cartesian(ylim=c(0,10))

#25% tried to alter from previous Q, but made some errors during my attempt
```


