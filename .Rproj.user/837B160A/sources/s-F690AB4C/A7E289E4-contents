---
title: "Lab4"
author: "Derek Maldonado"
date: "9/30/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Question 1
Estimate the letter occurrence probabilities of all 26 letters in English by measuring a paragraph of English text from wikipedia. (hint use strsplit() to split a paragraph into individual letters


```{r}
samparagraph <- ("Shortly after their arrival in Yharnam, the player finds their first Lamp. They light it, and are transported to a spectral realm called the Hunter's Dream, which acts as both a sanctuary and workshop. The player encounters two entities: Gehrman, an elderly, wheelchair-bound man who provides advice to Hunters like the player; and the Doll, a living life-size doll that assists the player in leveling up and emotionally bonds with the Hunter over the course of the game. Gehrman informs the player that in order to obtain the blood they seek and escape the dream, they must hunt down the various monsters plaguing Yharnam, and halt the source of the plague. As the Hunter delves deeper into the city, they begin to learn its dark secrets, as well as the origin of the plague ravaging it. Long ago, the residents of Yharnam began worshiping ancient, eldritch cosmic beings known as the Great Ones after scholars from the College of Byrgenwerth discovered something referred to as a medium in the ruins of an ancient, highly advanced civilization that Yharnam was built on top of. The Great Ones provided the healing blood Yharnam was famous for, which is also the source of the plague.")

bbletters <- unlist(strsplit(samparagraph,split= ""))
bblowered <- tolower(bbletters)
lettercount<-table(bblowered)
lettercount<-data.frame(lettercount)

library(dplyr)
bbgraph <-lettercount%>%
  filter(bblowered %in% letters == TRUE)
totalbb <- sum(bbgraph$Freq)

bbgraph <- bbgraph %>%
  mutate(probabilities= Freq/totalbb)

knitr::kable(bbgraph)

#25% got to the part where I lower cased all the letters, couldnt figure out how to remove punctuation

```

## Question 2
Generate “random” strings of letters that are sampled from a distribution where letter occurrence probability is the same as natural English. Use the probabilities for each letter from this wikipedia article, or use your own estimates from the previous question (2 points).


```{r}

q2let <- sample(bbgraph$bblowered,50*5,replace=TRUE,
                prob= bbgraph$probabilities)

mystring <- matrix(q2let,ncol=5)

randomq2 <- c()
for (i in 1:dim(mystring)[1]){
  randomq2[i] <- paste(mystring[i,], collapse="")
}

randomq2

#75% pretty much just used the example from earlier and used prior q variables

```

## Question 3
Generate a random walk of 10,000 steps. In a random walk, you are simulating the process of randomly taking a step up or down, as if you are on an infinite staircase. At each step you flip a coin. If you get heads you go up one step, if you get tails you go down one step. Start on step 0, then simulate a random walk for 10,000 steps. Your vector should preserve the step number for each step. For example, if the the first three steps were all heads, then the vector would begin with 0,1,2,3, which indicates a single step up each time. Plot the first 1,000 steps.

```{r}

steps <- c(0)

for(i in 1:10000){
  coin <- sample(c(1,-1),1)
  steps[i+1] <- steps[i]+coin
}

plot(steps[1:1000])

#0% approached it the completely wrong way
```

## Question 4
What was the most positive and most negative step reached out of 10,000?


```{r}
min(steps)
max(steps)

#100% seemed pretty straightforward
```

## Question 5
What was the longest run of steps where all steps were positive numbers. For example, in the sequence: 1,2,3,2,1,0,-1,-2,-1,-2,-1,0,1,2,3; the answer is 5 because the first five values were all positive, and this was the longest sequence of positive values


```{r}
logicstep <- sign(steps)
#sign function turns values into either 1 or -1 based on if its pos or neg

sequencing <- c()
counter <- 0

#below is creating a sequence between 1 and 10,001 
for(i in 1:length(logicstep)){
  if(logicstep[i] ==0){
    sequencing <- c(sequencing,counter)
    # adding another number into sequencing vector, enlarging the vector
    #only happens when i=1, which is only during the first loop
    counter <- 0
  } else {
    counter <- counter+logicstep[i]
    #executed every other time, now counter increases or decreases based on
    #value in logical step which is the 1 or -1 from the logicstep vector
  }
}

max(sequencing)

#5% I knew the max part at the end, thats about it
```